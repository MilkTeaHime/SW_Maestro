================================================[로컬 저장소 생성]================================================
git init		저장소 생성
git add 파일명		저장소에 파일 추가		
git commit		저장소에 수정 내역 제출			// cmd창 말고 Git Bash 실행해서 쓸 것. 커밋메시지 디폴트가 vim으로 작성하는거라고 함
   -a		저장소의 변경된 파일 모두를 커밋. add되어 있지 않은 애들도 자동으로 다 add해서 커밋함.		// 시간 단위로 커밋할 때는 좋지만 모듈 단위로 커밋해야 한다면 무의미한 옵션.
   -m		커밋메시지가 간단할 때 사용. vim을 실행하지 않고 그냥 커맨드라인에 커밋메시지를 인라인으로 집어넣을 수 있음.
git status		(주) 로컬저장소를 마지막 커밋 상태와 비교하여 변경점이 있는 파일들을 보여줌
==================================================================================================================

==================================================[변경사항 확인]=================================================
git branch		존재하는 브랜치들 출력		
git status		(주) 로컬저장소를 마지막 커밋 상태와 비교하여 변경점이 있는 파일들을 보여줌
git log			커밋 기록 보기			
   -p		각 커밋에 적용된 실제 변경 내용을 보여줍니다.		// ???
   --word-diff	diff 명령의 실행 결과를 단어 단위로 보여줍니다.		// ???
   --stat		각 커밋에서 수정된 파일의 통계 정보를 보여줍니다.
   --name-only	커밋 정보 중에서 수정된 파일의 list만 간단히 보여줍니다.
   --relative-date	1일 전, 1주 전처럼 상대적인 시간을 비교하는 형식으로 보여줍니다.
 ★--graph		브랜치 분기와 병합 내역을 아스키 그래프로 보여줍니다.	// --all을 붙여주지 않으면 현재 브랜치에서 커밋한거만 보여줘서 의미가 엄서여
==================================================================================================================

=====================================================[브랜치]=====================================================
git branch 브랜치명		저장소에 브랜치 추가		// git branch 까지만 치면 현재 존재하는 브랜치들을 다 보여줌
git checkout 브랜치명		작업 중인 브랜치 변경		
git merge 브랜치명		브랜치 병합			// 현재 작업 중인 브랜치에 '브랜치명'의 브랜치를 끌어와 병합. 더 큰(마스터에 더 가까운) 브랜치를 체크아웃해서 실행해야 함.
	merging 상태가 되면 충돌이 난 파일을 열어서 '<<<<<<< HEAD' ~ '>>>>>>> hotfix' 사이를 수정해주면 됨
==================================================================================================================
* checkout : (책이나 방을) 빌리다 - 브랜치를 현재 작업공간으로 빌려온다는 의미.

==========================================[깃에는 없고 깃헙엔 있는 기능들]========================================
fork		
pull request
issue			
wiki
==================================================================================================================

==============================================[로컬과 리모트를 연결]==============================================
git clone		리모트 내용을 로컬로 복사
git remote		로컬을 특정 리모트와 연결. 최초의 푸시라고 보면 됨. 
git push		로컬 저장소의 변경 사항을 원격 저장소로 보냄
git fetch		리모트의 브랜치들을 로컬로 가져옴.
git pull		=fetch + merge. 병합을 자동으로 수행해버리기 때문에 변경사항이 어떤 것인지 알기 어렵다고 함.
 ------------------------------------------------------실례------------------------------------------------------
 <처음 레포를 파는 경우>
 1. 깃헙에 레포를 하나 만든다. 이 때 README.md 파일은 git push origin --all하면 충돌이 일어난다고 하니 안 만드는 것을 추천한다.
 2. git remote add origin https://github.com/42deSix/RooStory.git			# origin은 레포의 별칭이다. 딴걸로 지정해도 되긴 한다.
  2-1. git remote -v 명령을 통해 결과를 확인할 수 있다.
 3. git push origin --all								# 브랜치 상태를 초기화한다.

 <본격적인 협업이 시작된 후>
 4. 작업하고 git push origin master 를 통해 푸시한다. 
  4-1. 리모트와 로컬의 베이스가 다르면 푸시가 거부당한다.
   4-1-1. git fetch 명령을 통해 리모트의 커밋정보를 가져온다.
   4-1-2. git branch -a 명령을 통해 리모트의 브랜치가 로컬에 복사되어 온 것을 볼 수 있다.
   4-1-3. 로컬의 마스터브랜치를 체크아웃한 상태에서 git merge origin/master 명령을 통해 병합을 시도한다. 당연히 실패한다.
    4-1-3-1. git diff 명령을 통해 어떤 차이가 있었는지 확인한다.	# 그냥 머지시도해보고 파일 열면 달라진 점 다 나오는 거 아닌가..
    4-1-3-2. 파일을 열어 충돌을 직접 해결해준다. 
    4-1-3-3. 커밋한다. 메시지는 "conflict resolved" 정도로 쓰나보다.	# 이 커밋을 하기 싫으면 rebase를 쓰면 된다고 배웠다.
  4-2. 리모트와 로컬의 베이스가 똑같다면 그냥 자연스럽게 푸시된다. 
 ----------------------------------------------------------------------------------------------------------------
==================================================================================================================

////////////////////////////////////
// 오류 신고 - ungsik.yun@gmail.com
//
// p.60 
// vi 입력모드 들어갈 때 명령어 대소문자 구분함.
// 대문자 I면 해당 줄의 맨 처음부터 입력하고 대문자 A면 해당 줄의 맨 끝부터 입력하고 대문자 O면 해당 줄 앞에 삽입함
////////////////////////////////////